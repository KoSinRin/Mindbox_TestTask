# -*- coding: utf-8 -*-
"""Mindbox_TestTask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q4MCdEhNT7TTCD6fUY3IA0J_HXZVEyvr
"""

# Найдём сумму цифр из ID

def idSum(rawId:int):
    ''' 
    idSum стартует с нулевым numSum, затем "откусывает" последнюю цифру из rawId и плюсует к numSum. 
    Процесс повторяется до тех пор, пока не будет просуммирована каждая цифра из значения rawId.
    '''
    numSum = 0
    while rawId > 0:
      numSum += rawId % 10
      rawId //= 10
    return numSum

# При значении idSum(123475):  
# 22

# Задача №1

def customersGroups(n_customers:int) -> dict:
  '''
  customersGroups — это функция, которая подсчитывает число покупателей, попадающих в каждую группу, если нумерация ID сквозная и начинается с 0. 
  На вход функция получает целое число n_customers (количество клиентов).
  '''
  groupAndCust = {}
  for custID in range(0, n_customers):
    # Для формирования group, будем передавать по очереди значения в idSum, начиная с 0
    # Суммируем значения в каждой из групп
    # Если группа по полученному значению отсутствует, создадим её 
    # В конце, вернём словарь с покупателями по группам
    group = idSum(custID)
    if groupAndCust.get(group):
      groupAndCust[group] += 1
    else:
      groupAndCust[group] = 1
  return groupAndCust

# При customersGroups(20):
# {0: 1, 1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 1}

# Задача №2

def customersGroupsFromN(n_first_id:int, n_customers:int) -> dict:
  '''
  Функция, аналогичная customersGroups, если ID начинается с произвольного числа. 
  На вход функция получает целые числа: n_customers (количество клиентов) и n_first_id (первый ID в последовательности).
  '''
  groupAndCust = {}
  for custID in range(n_first_id, n_first_id + n_customers):
    # Алгоритм почти полность аналогичен customersGroups, но 
    # добавляется значение n_first_id для старта + суммируем n_first_id и n_customers для получения id последнего клиента
    group = idSum(custID)
    if groupAndCust.get(group):
      groupAndCust[group] += 1
    else:
      groupAndCust[group] = 1
  return groupAndCust

# При customersGroupsFromN(7,21):
# {7: 3, 8: 3, 9: 3, 1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 10: 1}